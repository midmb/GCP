# Cloud DevOps Automation Toolkit
# cloud_automation/
from typing import Dict, List
import boto3
import google.cloud.compute_v1 as compute_v1
from azure.mgmt.compute import ComputeManagementClient
import logging
import json
import yaml
from dataclasses import dataclass
from datetime import datetime

@dataclass
class ServerMetrics:
    cpu_usage: float
    memory_usage: float
    disk_usage: float
    timestamp: datetime

class CloudAutomation:
    def __init__(self, cloud_provider: str):
        self.cloud_provider = cloud_provider
        self.logger = self._setup_logging()
        
        if cloud_provider == "aws":
            self.client = boto3.client('ec2')
        elif cloud_provider == "gcp":
            self.client = compute_v1.InstancesClient()
        elif cloud_provider == "azure":
            # Azure client setup would go here
            pass

    def _setup_logging(self) -> logging.Logger:
        """Configure logging for the automation toolkit"""
        logger = logging.getLogger(__name__)
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
        return logger

    def get_instances(self) -> List[Dict]:
        """Get list of running instances across clouds"""
        instances = []
        
        try:
            if self.cloud_provider == "aws":
                response = self.client.describe_instances()
                for reservation in response['Reservations']:
                    for instance in reservation['Instances']:
                        instances.append({
                            'id': instance['InstanceId'],
                            'type': instance['InstanceType'],
                            'state': instance['State']['Name'],
                            'tags': instance.get('Tags', [])
                        })
            
            elif self.cloud_provider == "gcp":
                project = "your-project-id"
                zone = "us-central1-a"
                request = self.client.list(project=project, zone=zone)
                for instance in request:
                    instances.append({
                        'id': instance.id,
                        'type': instance.machine_type,
                        'state': instance.status,
                        'tags': instance.labels
                    })
                    
        except Exception as e:
            self.logger.error(f"Error getting instances: {str(e)}")
            raise
            
        return instances

    def auto_scale(self, metrics: ServerMetrics, threshold: float = 80.0) -> None:
        """Implement auto-scaling based on metrics"""
        try:
            if metrics.cpu_usage > threshold:
                self.logger.info(f"High CPU usage detected: {metrics.cpu_usage}%")
                self.scale_up()
            elif metrics.cpu_usage < threshold/2:
                self.logger.info(f"Low CPU usage detected: {metrics.cpu_usage}%")
                self.scale_down()
                
        except Exception as e:
            self.logger.error(f"Auto-scaling error: {str(e)}")
            raise

    def deploy_app(self, app_config: Dict) -> None:
        """Deploy application using cloud-specific services"""
        try:
            if self.cloud_provider == "aws":
                self._deploy_to_aws(app_config)
            elif self.cloud_provider == "gcp":
                self._deploy_to_gcp(app_config)
                
        except Exception as e:
            self.logger.error(f"Deployment error: {str(e)}")
            raise

    def _deploy_to_aws(self, config: Dict) -> None:
        """AWS-specific deployment logic"""
        ecs = boto3.client('ecs')
        
        task_definition = {
            'family': config['app_name'],
            'containerDefinitions': [
                {
                    'name': config['app_name'],
                    'image': config['docker_image'],
                    'memory': config['memory'],
                    'cpu': config['cpu'],
                    'essential': True,
                    'portMappings': [
                        {
                            'containerPort': config['port'],
                            'protocol': 'tcp'
                        }
                    ]
                }
            ]
        }
        
        ecs.register_task_definition(**task_definition)
        self.logger.info(f"Deployed {config['app_name']} to AWS ECS")

    def setup_monitoring(self) -> None:
        """Set up cloud monitoring and alerting"""
        if self.cloud_provider == "aws":
            cloudwatch = boto3.client('cloudwatch')
            
            alarm_config = {
                'AlarmName': 'HighCPUUtilization',
                'ComparisonOperator': 'GreaterThanThreshold',
                'EvaluationPeriods': 2,
                'MetricName': 'CPUUtilization',
                'Namespace': 'AWS/EC2',
                'Period': 300,
                'Statistic': 'Average',
                'Threshold': 80.0,
                'ActionsEnabled': True,
                'AlarmDescription': 'Alarm when CPU exceeds 80%'
            }
            
            cloudwatch.put_metric_alarm(**alarm_config)
            self.logger.info("Monitoring setup complete")

class InfrastructureManager:
    def __init__(self, config_file: str):
        self.config = self._load_config(config_file)
        self.automations = {}
        
        for provider in self.config['cloud_providers']:
            self.automations[provider] = CloudAutomation(provider)

    def _load_config(self, config_file: str) -> Dict:
        """Load infrastructure configuration"""
        with open(config_file, 'r') as f:
            return yaml.safe_load(f)

    def deploy_infrastructure(self) -> None:
        """Deploy infrastructure across multiple clouds"""
        for provider, config in self.config['infrastructure'].items():
            automation = self.automations[provider]
            automation.deploy_app(config)
            automation.setup_monitoring()
            
    def get_status(self) -> Dict:
        """Get status of infrastructure across all clouds"""
        status = {}
        for provider, automation in self.automations.items():
            instances = automation.get_instances()
            status[provider] = {
                'instance_count': len(instances),
                'instances': instances
            }
        return status

# Example usage
if __name__ == "__main__":
    # Configuration file
    config = {
        'cloud_providers': ['aws', 'gcp'],
        'infrastructure': {
            'aws': {
                'app_name': 'my-app',
                'docker_image': 'my-app:latest',
                'memory': 512,
                'cpu': 256,
                'port': 8080
            },
            'gcp': {
                'app_name': 'my-app',
                'docker_image': 'my-app:latest',
                'machine_type': 'e2-medium',
                'zone': 'us-central1-a'
            }
        }
    }
    
    # Save configuration
    with open('infrastructure.yaml', 'w') as f:
        yaml.dump(config, f)
    
    # Initialize and use the infrastructure manager
    manager = InfrastructureManager('infrastructure.yaml')
    manager.deploy_infrastructure()
    
    # Get infrastructure status
    status = manager.get_status()
    print(json.dumps(status, indent=2))
